resolver  127.0.0.11 valid=10s;  # recover from the backend's IP changing

server {
    #listen  80;
    #listen [::]:80;

    # SSL configuration
    listen      443 ssl;
    listen      [::]:443 ssl;
    include     ssl/self-signed.conf;
    include     ssl/ssl-params.conf;


    location / {
        root /var/www/;
        try_files $uri /index.html; # Required for development builds
        # Only production builds will have direct URL access working.
        # See: https://stackoverflow.com/questions/36365116/nginx-not-getting-file-available-on-route-through-ember-js
    }

    # Note that using localhost below instead of 127.0.0.1 will cause nginx
    # to attempt to contact postgres on ::1 (ipv6), which apparently
    # postgrest doesn't bind to, despite explcitly declaring PGRST_SERVER_HOST
    # See bug: https://github.com/PostgREST/postgrest/issues/3203

    # Perhaps this should be transistioned to unix sockets in the future:
    # https://dev.to/vearutop/using-nginx-as-a-proxy-to-multiple-unix-sockets-3c7a

     location /api/ {
         proxy_pass http://127.0.0.1:3000/;
         proxy_http_version 1.1;
         proxy_set_header Connection "";
         proxy_set_header Host $host;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Real-IP $remote_addr;
         add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
         expires off;
     }

     # This proxy is used for development purposes to be compatible with ember server --proxy http://check-in/api
     location /api/flask/ {
         proxy_pass http://127.0.0.1:5000/;
         proxy_http_version 1.1;
         proxy_set_header Connection "";
         proxy_set_header Host $host;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Real-IP $remote_addr;
         add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
         expires off;
     }

     # This proxy is used for production purposes, where the client will just go back to the localhost.
     location /flask/ {
         proxy_pass http://127.0.0.1:5000/;
         proxy_http_version 1.1;
         proxy_set_header Connection "";
         proxy_set_header Host $host;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header X-Real-IP $remote_addr;
         add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
         expires off;
     }
}
